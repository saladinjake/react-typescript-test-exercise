{"version":3,"sources":["components/Header/Header.tsx","App.tsx","reducers/auth.tsx","reducers/assigned_users.tsx","reducers/task.tsx","actions/types.tsx","reducers/index.tsx","config/config.ts","services/crudeapi.services.tsx","actions/index.tsx","components/Signin/Signin.tsx","components/Home/Home.tsx","components/Signout/Signout.tsx","components/Dashboard/TaskEvent/FormBox.tsx","components/Dashboard/TaskEvent/TaskLists.tsx","components/Dashboard/TaskEvent/Task.tsx","components/Dashboard/Dashboard.tsx","hocs/AuthorizationGate.tsx","index.tsx"],"names":["connect","state","isAuth","auth","authentichated","App","children","INITIAL_STATE","authenticated","errorMessage","assignedUsers","loading","initialState","taskReducer","tasks","action","type","payload","map","singleTask","id","filter","rootReducer","combineReducers","assignedUser","error","users","form","formReducer","Endpoint","company_id","localStorage","getItem","token","fetch","Config","method","headers","credentials","Authorization","Accept","data","body","JSON","stringify","fetchSuccess","getTasks","dispatch","a","async","SlooviCrudApiService","res","json","resolvedData","results","Promise","resolve","reduxForm","errorMessageessage","resetFormFields","reset","sendData","redirectTo","responseApi","apiResponse","setItem","authAction","handleSubmit","history","useState","isLoading","setIsLoading","renderInput","input","name","className","onSubmit","setTimeout","htmlFor","Field","component","disabled","Home","logout","useEffect","removeItem","EnhancedForm","props","admins","useSelector","typeOfTime","setIsTime","setIsDate","setIsFocus","setIsBlur","document","getElementsByTagName","mode","formId","style","marginLeft","marginRight","value","inputValues","task_msg","editData","onChange","handleInputChange","placeholder","data-testid","defaultValue","task_date","task_time","time","timeVal","Date","toISOString","slice","secondsToTime","onFocus","event","target","match","onBlur","assigned_user","handleSelectChange","admin","onClick","e","handleDelete","preventDefault","elementForm","getElementById","querySelector","classList","toggle","formIndex","$el2","$elementClip","handleFormSubmit","DynamicData","formMode","setFormMode","setFormId","allAllowedAdmin","is_completed","time_zone","setInputValues","Math","random","floor","domAutoRefresh","setDomAutoRefresh","inputValuesForm","submitData","console","log","currentTarget","err","str","secondsGiven","parseInt","hoursDeduced","minutesObtained","inputValue","background","padding","key","length","taskGiven","index","lineHeight","marginTop","href","src","alt","Loading","remove","nowViewing","window","getTask","toString","response","split","$el","focus","add","handleEditView","createTask","reject","deleteTask","updateTask","setAllAllowedAdmin","submitted","allData","usersAssigned","timeToSeconds","seconds","minutes","timeUnit","pop","timezone_in_seconds","getTimezoneOffset","dataEdited","divBox","location","reload","safeSearchTypeValue","MockUpNavbar","MockUpSidebar","FakeToolBar","DashboardAuthenticated","ChildComponent","AuthenticatorGateWay","this","redirect","authorized","push","Component","AuthInterceptor","getAssignedUsers","Fragment","usersList","user","first","last","user_id","message","store","createStore","applyMiddleware","thunk","ReactDOM","render","path","exact","Signin","Dashboard","Signout"],"mappings":"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","file":"static/js/main.9f3d3fa3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport interface HeaderProps {\r\n  isAuth: string;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n * fAKE HEADER SAMPLE\r\n */\r\nconst Header: React.SFC<HeaderProps> = ({ isAuth }) => {\r\n  const display = () => {\r\n    if (isAuth) {\r\n      return <>Sloovee</>;\r\n    } else {\r\n      return <></>;\r\n    }\r\n  };\r\n  return <div>{display()}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    isAuth: state.auth.authentichated,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from \"react\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\ninterface AppProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst App: React.FC<AppProps> = ({ children }: AppProps) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { AUTH_USER, AUTH_ERROR } from \"../actions/types\";\r\nconst INITIAL_STATE = {\r\n  authenticated: \"\",\r\n  errorMessage: \"\",\r\n};\r\ninterface StateProps {\r\n  authenticated?: string | null;\r\n  errorMessage?: string | null;\r\n}\r\ninterface ActionProps {\r\n  type: string;\r\n  payload: string;\r\n}\r\n\r\n/*\r\n*@name: AUTH REDUCER\r\n*@desc: when dispatched would trigger AUTHENTICATION OF USER\r\n\r\n*/\r\nexport default function (\r\n  state: StateProps = INITIAL_STATE,\r\n  action: ActionProps\r\n) {\r\n  switch (action.type) {\r\n    case AUTH_USER:\r\n      return { ...state, errorMessage: \"\", authenticated: action.payload };\r\n    case AUTH_ERROR:\r\n      return { ...state, errorMessage: action.payload, authenticated: \"\" };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  FETCH_USERS_REQUEST,\r\n  FETCH_USERS_SUCCESS,\r\n  FETCH_USERS_FAILURE,\r\n} from \"../actions/types\";\r\nconst INITIAL_STATE = {\r\n  assignedUsers: [],\r\n  errorMessage: \"\",\r\n  loading: false,\r\n};\r\ninterface StateProps {\r\n  assignedUsers: string[] | null;\r\n  errorMessage?: string | null;\r\n  loading?: boolean | null;\r\n}\r\ninterface ActionProps {\r\n  type: string;\r\n  payload: string;\r\n}\r\n\r\nexport default function (\r\n  state: StateProps = INITIAL_STATE,\r\n  action: ActionProps\r\n) {\r\n  switch (action.type) {\r\n    case FETCH_USERS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_USERS_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        errorMessage: \"\",\r\n        assignedUsers: action.payload,\r\n      };\r\n    case FETCH_USERS_FAILURE:\r\n      return {\r\n        error: action.payload,\r\n        loading: false,\r\n        users: [],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  CREATE_ITEM,\r\n  RETRIEVE_ITEM,\r\n  UPDATE_ITEM,\r\n  DELETE_ITEM,\r\n} from \"../actions/types\";\r\n\r\ninterface TaskProps {\r\n  id?: string | null;\r\n  assigned_user: string; //<id value from /team api response >,\r\n  task_date: string; //<date in 'YYYY-MM-DD' format from date field in task>,\r\n  task_time: number; //<time from time field in task>,integer ,(for ex=01:30am means 5400 seconds)\r\n  is_completed: boolean; //<0 or 1 integer data type>,\r\n  time_zone: number; //<Give timezone value in seconds and data type is integer>,(for ex= +05:30 means 19800 seconds)\r\n  task_msg: string; //<task description from task description field in task>\r\n}\r\n\r\nconst initialState: TaskProps[] = [];\r\n\r\ninterface ActionProps {\r\n  type: string;\r\n  payload: TaskProps;\r\n}\r\n\r\nfunction taskReducer(tasks = initialState, action: ActionProps) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_ITEM:\r\n      return [...tasks, payload];\r\n\r\n    case RETRIEVE_ITEM:\r\n      return payload;\r\n\r\n    case UPDATE_ITEM:\r\n      return tasks.map((singleTask) => {\r\n        if (singleTask.id === payload.id) {\r\n          return {\r\n            ...singleTask,\r\n            ...payload,\r\n          };\r\n        } else {\r\n          return singleTask;\r\n        }\r\n      });\r\n\r\n    case DELETE_ITEM:\r\n      return tasks.filter(({ id }) => id !== payload.id);\r\n    default:\r\n      return tasks;\r\n  }\r\n}\r\n\r\nexport default taskReducer;\r\n","/*\r\n*@name: AUTHENTICATION TYPES\r\n*@desc: AUTHORIZATION TYPES FOR LOGIN\r\n\r\n*/\r\nexport const AUTH_USER = \"auth_user\";\r\nexport const AUTH_ERROR = \"auth_error\";\r\n\r\n/*\r\n*@name: admins fetches or assigned users\r\n*@desc: types for assigned user reducer actions\r\n\r\n*/\r\nexport const FETCH_USERS_REQUEST = \"FETCH_USERS_REQUEST\";\r\nexport const FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\r\nexport const FETCH_USERS_FAILURE = \"FETCH_USERS_FAILURE\";\r\n\r\n/*\r\n*@name: TASK TYPES\r\n*@desc: TYPES FOR TASK CRUDE API CONSUMPTION IMPLEMENTATION\r\n\r\n*/\r\nexport const CREATE_ITEM = \"CREATE_ITEM\";\r\nexport const RETRIEVE_ITEM = \"RETRIEVE_ITEM\";\r\nexport const UPDATE_ITEM = \"UPDATE_ITEM\";\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./auth\";\r\nimport assignedUsersReducer from \"./assigned_users\";\r\nimport taskReducer from \"./task\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\n/*\r\n*@name: COMBINED REDUCERS\r\n*@desc: REDUCER STORE HOUSE\r\n\r\n*/\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  assignedUser: assignedUsersReducer,\r\n  taskReducer: taskReducer,\r\n  form: formReducer,\r\n});\r\n\r\n// define the root return type here\r\nexport type DefaultingRootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","interface Config{\r\n\tbaseUrl: string;\r\n\tappType: \"demo\";\r\n\tcompany: \"sloovi\"\r\n}\r\n\r\n\r\nexport default {\r\n\tbaseUrl: process.env.NODE_ENV==\"development\" ? \"\": \"api/\", \r\n\tdemoToken: ``,\r\n\tdemo_company_id: ``  \r\n}","import axios from \"./axios.services\";\r\nimport Config from \"../config/config\"\r\n\r\ninterface TaskProps {\r\n  assigned_user: string; //<id value from /team api response >,\r\n  task_date: string; //<date in 'YYYY-MM-DD' format from date field in task>,\r\n  task_time: number; //<time from time field in task>,integer ,(for ex=01:30am means 5400 seconds)\r\n  is_completed: number; //<0 or 1 integer data type>,\r\n  time_zone: number; //<Give timezone value in seconds and data type is integer>,(for ex= +05:30 means 19800 seconds)\r\n  task_msg: string; //<task description from task description field in task>\r\n}\r\n\r\nfunction toTimestamp(strDate: string) {\r\n  var datumDigits: number = Date.parse(strDate);\r\n  return datumDigits / 1000;\r\n}\r\n\r\n//console.log(toTimestamp(\"+05:30\"));\r\n\r\nconst fakeData: TaskProps = {\r\n  assigned_user: \"iddd\",\r\n  task_date: \"2022-12-12\",\r\n  task_time: 7, //01:30am\r\n  is_completed: 0,\r\n  time_zone: 2000, //(for ex= +05:30 means 19800 seconds)\r\n  task_msg: \"kf fkdkfd\",\r\n};\r\n\r\nclass SlooveeCrudeApiService {\r\n  /*@ METHOD: getTask\r\n   *@params: \r\n   *@desc: fetches a lists of resources\r\n   */\r\n  getTasks(): Promise<any> {\r\n    const company_id = localStorage.getItem(\"company_id\");\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    return fetch(Config.baseUrl +\r\n      `task/lead_465c14d0e99e4972b6b21ffecf3dd691?company_id=${company_id}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n          credentials: \"include\",\r\n          Authorization: \"Bearer \" + token,\r\n          Accept: \"application/json\",\r\n            'Access-Control-Allow-Origin':'*'\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  /*@METHOD: getTask\r\n   *@params: id: string\r\n   *@desc: fetch  a single resource\r\n   */\r\n\r\n  getTask(id: string): Promise<any> {\r\n    const company_id = localStorage.getItem(\"company_id\");\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    return fetch(Config.baseUrl +\r\n      `task/lead_465c14d0e99e4972b6b21ffecf3dd691/${id}?company_id=${company_id}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n          credentials: \"include\",\r\n          Authorization: \"Bearer \" + token,\r\n          Accept: \"application/json\",\r\n            'Access-Control-Allow-Origin':'*'\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  /*@METHOD: createTask\r\n   *@params: data: TaskProps\r\n   *@desc: creates a resource\r\n   */\r\n\r\n  createTask(data: TaskProps): Promise<any> {\r\n    const company_id = localStorage.getItem(\"company_id\");\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    return fetch(Config.baseUrl +\r\n      `task/lead_465c14d0e99e4972b6b21ffecf3dd691?company_id=${company_id}`,\r\n      {\r\n        method: \"POST\",\r\n\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n          credentials: \"include\",\r\n          Authorization: \"Bearer \" + token,\r\n          Accept: \"application/json\",\r\n            'Access-Control-Allow-Origin':'*'\r\n        },\r\n        body: JSON.stringify(data),\r\n      }\r\n    );\r\n  }\r\n\r\n  /*@METHOD: updateTask\r\n   *@params: id: string, data: TaskProps\r\n   *@desc: updates a resource\r\n   */\r\n\r\n  updateTask(id: string, data: TaskProps): Promise<any> {\r\n    const company_id = localStorage.getItem(\"company_id\");\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    return fetch(Config.baseUrl +\r\n      `task/lead_465c14d0e99e4972b6b21ffecf3dd691/${id}?company_id=${company_id}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n          credentials: \"include\",\r\n          Authorization: \"Bearer \" + token,\r\n          Accept: \"application/json\",\r\n            'Access-Control-Allow-Origin':'*'\r\n        },\r\n        body: JSON.stringify(data),\r\n      }\r\n    );\r\n  }\r\n  /*@method: deleteTask\r\n   *@params: id: string\r\n   *@desc: deletes a resource\r\n   */\r\n  deleteTask(id: string): Promise<any> {\r\n    const company_id = localStorage.getItem(\"company_id\");\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    return fetch(Config.baseUrl +\r\n      `task/lead_465c14d0e99e4972b6b21ffecf3dd691/${id}?company_id=${company_id}`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n          credentials: \"include\",\r\n          Authorization: \"Bearer \" + token,\r\n          Accept: \"application/json\",\r\n            'Access-Control-Allow-Origin':'*'\r\n        },\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nconst Endpoint = new SlooveeCrudeApiService();\r\nexport default Endpoint;\r\n","import axios from \"axios\";\r\nimport { Dispatch } from \"react\";\r\n//import axios from \"../services/axios.services\"\r\nimport {\r\n  AUTH_USER,\r\n  AUTH_ERROR,\r\n  FETCH_USERS_FAILURE,\r\n  FETCH_USERS_REQUEST,\r\n  FETCH_USERS_SUCCESS,\r\n  CREATE_ITEM,\r\n  RETRIEVE_ITEM,\r\n  UPDATE_ITEM,\r\n  DELETE_ITEM,\r\n} from \"./types\";\r\n\r\n// CRUD API class\r\nimport SlooviCrudApiService from \"../services/crudeapi.services\";\r\nimport Config from \"../config/config\"\r\n\r\n// AUTHENTICATION  ACTION DISPATCHES\r\ninterface CredentialsProps {\r\n  name: string;\r\n  password: string;\r\n}\r\n\r\n/*\r\n*@name: authenticator Actions\r\n*@desc: when dispatched would trigger user authentication\r\n\r\n*/\r\nexport const authAction = (\r\n  credentials: CredentialsProps,\r\n  redirectTo: () => void\r\n) => {\r\n  return async (dispatch: Dispatch<any>) => {\r\n    try {\r\n      const data: string = JSON.stringify(credentials);\r\n\r\n      const responseApi = await fetch(Config.baseUrl+ \"login\", {\r\n        method: \"POST\",\r\n        body: data,\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n          credentials: \"include\",\r\n            'Access-Control-Allow-Origin':'*'\r\n\r\n        },\r\n\r\n\r\n      });\r\n\r\n      const apiResponse = await responseApi.json();\r\n\r\n      //console.log(apiResponse.results);\r\n      localStorage.setItem(\"token\", apiResponse.results.token);\r\n      localStorage.setItem(\"company_id\", apiResponse.results.company_id);\r\n\r\n      dispatch({\r\n        type: AUTH_USER,\r\n        payload: apiResponse.results.token,\r\n      });\r\n     // console.log(\"you are here\");\r\n\r\n      redirectTo();\r\n    } catch (error) {\r\n      //console.log(error);\r\n      dispatch({ type: AUTH_ERROR, payload: \"Not authorized\" });\r\n    }\r\n  };\r\n};\r\n// FETCH DROPDOWN USERS DISPATCHES\r\ninterface AssignedUsersProps {\r\n  username: string;\r\n  firstname: string;\r\n  lastname: string;\r\n}\r\n\r\n\r\n/*\r\n*@name: admins fetches or assigned users\r\n*@desc: when dispatched would trigger list of assigned users\r\n\r\n*/\r\nconst fetchRequest = () => ({ type: FETCH_USERS_REQUEST });\r\n\r\n/*\r\n*@name: admins fetches or assigned users\r\n*@desc: when dispatched would trigger failed results\r\n\r\n*/\r\nconst fetchFailure = (error: string) => ({\r\n  type: FETCH_USERS_FAILURE,\r\n  payload: error,\r\n});\r\n\r\n/*\r\n*@name: admins fetches or assigned users\r\n*@desc: when dispatched would trigger list of assigned users\r\n\r\n*/\r\nconst fetchSuccess = (users: { name: string; company_id: string }[]) => ({\r\n  type: FETCH_USERS_SUCCESS,\r\n  payload: users,\r\n});\r\n\r\n/*\r\n*@name: admins fetches or assigned users\r\n*@desc: action figures to get api data\r\n\r\n*/\r\nexport const getAssignedUsers = () => async (dispatch: Dispatch<any>) => {\r\n  dispatch(fetchRequest());\r\n  try {\r\n    const company_id = localStorage.getItem(\"company_id\");\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    const responseApi = await fetch(Config.baseUrl+\r\n      `team?product=outreach&company_id=${company_id}`,\r\n      {\r\n        method: \"GET\",\r\n\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n           credentials: \"include\",\r\n          Authorization: \"Bearer \" + token,\r\n          Accept: \"application/json\",\r\n          'Access-Control-Allow-Origin':'*'\r\n        },\r\n      }\r\n    );\r\n\r\n    const apiResponse = await responseApi.json();\r\n\r\n    ////console.log(apiResponse.results.data);\r\n    let users: {\r\n      first: string;\r\n      company_id: string;\r\n      last: string;\r\n      user_id: string;\r\n    }[] = apiResponse.results.data;\r\n    const usersList: { name: string; company_id: string; user_id: string }[] =\r\n      users.map((user) => ({\r\n        name: user.first + \" \" + user.last,\r\n        company_id: user.company_id,\r\n        user_id: user.user_id,\r\n      }));\r\n\r\n    ////console.log(usersList);\r\n    dispatch(fetchSuccess(usersList));\r\n  } catch (error) {\r\n    ////console.log(error.message);\r\n    dispatch(fetchFailure(error.message));\r\n  }\r\n};\r\n\r\n// CRUD API DISPATCHES\r\ninterface TaskProps {\r\n  assigned_user: string; //<id value from /team api response >,\r\n  task_date: string; //<date in 'YYYY-MM-DD' format from date field in task>,\r\n  task_time: number; //<time from time field in task>,integer ,(for ex=01:30am means 5400 seconds)\r\n  is_completed: number; //<0 or 1 integer data type>,\r\n  time_zone: number; //<Give timezone value in seconds and data type is integer>,(for ex= +05:30 means 19800 seconds)\r\n  task_msg: string; //<task description from task description field in task>\r\n}\r\n\r\nexport const createTask =\r\n  (data: TaskProps) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n      const res = await SlooviCrudApiService.createTask(data);\r\n\r\n      const resolvedData = await res.json();\r\n      ////console.log(resolvedData)\r\n      dispatch({\r\n        type: CREATE_ITEM,\r\n        payload: resolvedData.results,\r\n      });\r\n\r\n      return Promise.resolve(res.results);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n\r\nexport const getTasks = () => async (dispatch: Dispatch<any>) => {\r\n  try {\r\n    const res = await SlooviCrudApiService.getTasks();\r\n    ////console.log(\"has been called\")\r\n\r\n    const resolvedData = await res.json();\r\n    ////console.log(resolvedData)\r\n    dispatch({\r\n      type: RETRIEVE_ITEM,\r\n      payload: resolvedData.results,\r\n    });\r\n\r\n    return Promise.resolve(res.results);\r\n  } catch (err) {\r\n    ////console.log(err);\r\n  }\r\n};\r\n\r\nexport const updateTask =\r\n  (id: string, data: TaskProps) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n      const res = await SlooviCrudApiService.updateTask(id, data);\r\n\r\n      const resolvedData = await res.json();\r\n      //console.log(\"Api is reaching...\")\r\n      //console.log(resolvedData.results)\r\n\r\n      dispatch({\r\n        type: UPDATE_ITEM,\r\n        payload: resolvedData.results,\r\n      });\r\n\r\n      return Promise.resolve(res.data);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n\r\nexport const deleteTask =\r\n  (e: React.MouseEvent<HTMLElement>, id: string) =>\r\n  async (dispatch: Dispatch<any>) => {\r\n    try {\r\n      const res = await SlooviCrudApiService.deleteTask(id);\r\n\r\n      const resolvedData = await res.json();\r\n\r\n      //console.log(resolvedData.results)\r\n\r\n      dispatch({\r\n        type: DELETE_ITEM,\r\n        payload: { id },\r\n      });\r\n    } catch (err) {\r\n      ////console.log(err);\r\n    }\r\n  };\r\n\r\nexport const getTask = (id: string) => async (dispatch: Dispatch<any>) => {\r\n  try {\r\n    const res = await SlooviCrudApiService.getTask(id);\r\n\r\n    dispatch({\r\n      type: RETRIEVE_ITEM,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    ////console.log(err);\r\n  }\r\n};\r\n","import React, { Dispatch, useState } from \"react\";\r\nimport { reduxForm, Field, reset } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { authAction } from \"../../actions/index\";\r\nimport { History } from \"history\";\r\n\r\n/*\r\n * @author: test code exercires\r\n * Auth SIGNIN PAGE PROPS\r\n */\r\n\r\nexport interface SigninProps {\r\n  handleSubmit: (p: any) => any;\r\n  resetFormFields: () => void;\r\n  sendData: (\r\n    values: { name: string; password: string },\r\n    redirectTo: () => void\r\n  ) => void;\r\n  errorMessage: string;\r\n  history?: History;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc:SIGN IN PAGE\r\n */\r\n\r\nconst Signin: React.SFC<SigninProps> = ({\r\n  handleSubmit,\r\n  resetFormFields,\r\n  sendData,\r\n  errorMessage,\r\n  history,\r\n}: SigninProps) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const renderInput = ({ input, name, type, className }: any) => {\r\n    return <input {...input} name={name} type={type} className={className} />;\r\n  };\r\n\r\n  const formDataInputs = (credentials: { name: string; password: string }) => {\r\n    setIsLoading(true);\r\n    sendData(credentials, () => {\r\n      setIsLoading(false);\r\n      setTimeout(() => {\r\n          setIsLoading(true);\r\n       // window.location.href = \"./dashboard\";\r\n      }, 5000);\r\n    });\r\n    \r\n    setTimeout(() => {\r\n    // window.location.href = \"./dashboard\";\r\n    }, 5000);\r\n    setIsLoading(false);\r\n\r\n    resetFormFields();\r\n  };\r\n\r\n  return (\r\n    <main className=\"main\">\r\n      <div className=\"container\">\r\n        <section className=\"wrapper\">\r\n          <div className=\"heading\">\r\n            <h2>Sloovee</h2>\r\n            <h1 className=\"text text-large\">Sign In</h1>\r\n\r\n            <div>{errorMessage}</div>\r\n          </div>\r\n          <form\r\n            onSubmit={handleSubmit(formDataInputs)}\r\n            name=\"login\"\r\n            className=\"form\"\r\n          >\r\n            <label htmlFor=\"email\">Email:</label>\r\n            <br />\r\n            <Field\r\n              name=\"email\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              component={renderInput}\r\n            />\r\n            <br />\r\n            <label htmlFor=\"email\">Password:</label>\r\n            <br />\r\n            <Field\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              component={renderInput}\r\n            />\r\n            <br />\r\n            <div>{errorMessage}</div>\r\n            {!isLoading ? (\r\n              <button className=\"btn btn-primary\">Signin</button>\r\n            ) : (\r\n              <button className=\"btn btn-large btn-primary\" disabled>\r\n                <i className=\"fa fa-spinner\"></i>\r\n              </button>\r\n            )}\r\n          </form>\r\n        </section>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    errorMessage: state.auth.errorMessageessage,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n  return {\r\n    resetFormFields: () => dispatch(reset(\"signin\")),\r\n    sendData: (\r\n      credentials: { name: string; password: string },\r\n      redirectTo: () => void\r\n    ) => dispatch(authAction(credentials, redirectTo)),\r\n  };\r\n};\r\n\r\nexport default reduxForm({\r\n  form: \"signin\",\r\n})(connect(mapStateToProps, mapDispatchToProps)(Signin));\r\n","import React from \"react\";\r\nimport Login from \"../Signin/Signin\";\r\nexport interface HomeProps {}\r\n\r\n/*\r\n * @author: test code exercires\r\n * lANDING PAGE IS LOGIN PAGE\r\n  @desc:\r\n*/\r\n\r\nconst Home: React.SFC<HomeProps> = () => {\r\n  return (\r\n    <div>\r\n      <Login />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, Dispatch } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AUTH_USER } from \"../../actions/types\";\r\nimport Login from \"../Signin/Signin\";\r\nexport interface SignoutProps {\r\n  logout: () => void;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc:lOGOUT FEAUTURE NOT ASKED TO IMLEMENT\r\n */\r\n\r\nconst Signout: React.SFC<SignoutProps> = ({ logout }) => {\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"token\");\r\n    logout();\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Login />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n  return {\r\n    logout: () => dispatch({ type: AUTH_USER, payload: \"\" }),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Signout);\r\n","import React, {\r\n  Component,\r\n  useState,\r\n  SyntheticEvent,\r\n  MouseEvent,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\nimport { connect, RootStateOrAny, useDispatch, useSelector } from \"react-redux\";\r\nimport { createTask } from \"../../../actions\";\r\n\r\n/*state props*/\r\ninterface StateProps {\r\n  auth: object;\r\n  assignedUser: object;\r\n  form: object;\r\n}\r\n\r\n/*@desc: task interface props */\r\ninterface TaskProps {\r\n  id?: string | null;\r\n  assigned_user: string; //<id value from /team api response >,\r\n  task_date: string; //<date in 'YYYY-MM-DD' format from date field in task>,\r\n  task_time: number; //<time from time field in task>,integer ,(for ex=01:30am means 5400 seconds)\r\n  is_completed: number; //<0 or 1 integer data type>,\r\n  time_zone: number; //<Give timezone value in seconds and data type is integer>,(for ex= +05:30 means 19800 seconds)\r\n  task_msg: string; //<task description from task description field in task>\r\n}\r\n\r\n/*@desc: assigned users interface props */\r\ninterface userAssignment {\r\n  name: string;\r\n  company_id: string;\r\n}\r\n\r\ninterface EnumServiceItems extends Array<userAssignment> {}\r\n\r\n/*@desc: add task interface props */\r\ninterface AddTaskProps {\r\n  createTask: (data: TaskProps) => Promise<any>;\r\n  usersAssigned: EnumServiceItems[];\r\n}\r\n\r\n/*@desc: form component props type props */\r\ntype FormBoxProps<T> = {\r\n  inputValues: TaskProps;\r\n  handleInputChange: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  handleFormSubmit: (\r\n    e: React.MouseEvent<HTMLElement>,\r\n    id?: string,\r\n    dataEdited?: TaskProps\r\n  ) => void;\r\n  allAllowedAdmin: EnumServiceItems[];\r\n  handleSelectChange: (event: React.FormEvent<HTMLSelectElement>) => void;\r\n  editData?: TaskProps;\r\n  mode?: {\r\n    formMode: string;\r\n    setFormMode: React.Dispatch<React.SetStateAction<string>>;\r\n    formId?: number;\r\n  };\r\n  handleDelete: (e: React.MouseEvent<HTMLElement>, id: string) => void;\r\n};\r\n\r\ntype FormBoxState = {\r\n  admins: EnumServiceItems[];\r\n};\r\n\r\n/*\r\n*@name: formBox\r\n*@desc: generic form used for add and editing tasks \r\n\r\n*/\r\n\r\nconst FormBox: React.SFC<FormBoxProps<any>> = (props) => {\r\n  const admins = useSelector(\r\n    (state: RootStateOrAny) => state.assignedUser.assignedUsers\r\n  );\r\n\r\n  //use effect to change focus type on date and time\r\n  const [typeOfTime, setIsTime] = useState(\"time\");\r\n  const [typeOfDate, setIsDate] = useState(\"date\");\r\n  const [isFocus, setIsFocus] = useState(false);\r\n  const [isBlur, setIsBlur] = useState(false);\r\n\r\n  const [getTime, setTime] = useState();\r\n\r\n  const secondsToTime = (time: number = 0) => {\r\n    if (props.inputValues?.task_time && time == 0) {\r\n      const timeVal = new Date(props.inputValues?.task_time * 1000)\r\n        .toISOString()\r\n        .slice(14, 19);\r\n      return timeVal;\r\n    } else if (time) {\r\n      const timeVal = new Date(time * 1000).toISOString().slice(14, 19);\r\n      return timeVal;\r\n    }\r\n  };\r\n  // Handling input onFocus event\r\n  const focusHandler = (event: React.FocusEvent<HTMLInputElement>) => {\r\n    setIsFocus(true);\r\n    setIsBlur(false);\r\n\r\n    // Do something with event\r\n    ////console.log(event);\r\n\r\n    if (event.target.value) {\r\n      event.target.type = \"text\";\r\n      let name: string = event.target.value;\r\n      // Validate time\r\n      if (name.match(/^([01]?[0-9]|2[0-3])\\:+[0-5][0-9]$/i)) {\r\n        setIsTime(\"time\");\r\n      } else if (\r\n        name.match(/^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/) ||\r\n        name.match(\r\n          /^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$/\r\n        ) ||\r\n        name.match(/^\\d{2}\\/\\d{2}\\/\\d{4}$/) ||\r\n        name.match(/^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/)\r\n      ) {\r\n        setIsDate(\"date\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handling input onBlur event\r\n  const blurHandler = (event: React.FocusEvent<HTMLInputElement>) => {\r\n    setIsFocus(false);\r\n    setIsBlur(true);\r\n    if (event.target.value) {\r\n      event.target.type = \"text\";\r\n      let name: string = event.target.value;\r\n      // Validate time\r\n      if (name.match(/^([01]?[0-9]|2[0-3])\\:+[0-5][0-9]$/i)) {\r\n        //setIsTime(\"text\");\r\n      } else {\r\n        //name = secondsToTime(parseInt(event.target.value));\r\n        //event.target.value = name\r\n      }\r\n\r\n      if (\r\n        name.match(/^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/) ||\r\n        name.match(\r\n          /^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$/\r\n        ) ||\r\n        name.match(/^\\d{2}\\/\\d{2}\\/\\d{4}$/) ||\r\n        name.match(/^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/)\r\n      ) {\r\n        //setIsDate(\"text\");\r\n      } else {\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const elementForm: HTMLCollectionOf<HTMLFormElement> =\r\n      document.getElementsByTagName(\"form\");\r\n  }, []);\r\n\r\n  return (\r\n    <form\r\n      name=\"login\"\r\n      id={\"formData\" + props?.mode?.formId}\r\n      className=\"form form-hidden\"\r\n    >\r\n      <div\r\n        className=\"input-controlx\"\r\n        style={{ marginLeft: \"-20px\", marginRight: \"10px\" }}\r\n      >\r\n        <label className=\"input-label expanded-width\">Task Description</label>\r\n        <input\r\n          className=\"input-field form-control\"\r\n          name=\"task_msg\"\r\n          value={\r\n            props?.inputValues?.task_msg || props?.editData?.task_msg || \"\"\r\n          }\r\n          onChange={props.handleInputChange}\r\n          placeholder=\"Enter your task\"\r\n          type=\"text\"\r\n          data-testid=\"input-field-task_msg\"\r\n          defaultValue={props?.editData?.task_msg || \"\"}\r\n        />\r\n      </div>\r\n      <div className=\"main-flex-bare\">\r\n        <div\r\n          className=\"input-controlx\"\r\n          style={{ marginLeft: \"-20px\", marginRight: \"10px\" }}\r\n        >\r\n          <label className=\"input-label expanded-width custom-space\">\r\n            Date\r\n          </label>\r\n          <input\r\n            className=\"input-field form-control\"\r\n            name=\"task_date\"\r\n            value={\r\n              props?.inputValues?.task_date ||\r\n              props?.editData?.task_date ||\r\n              \"1222/12/12\"\r\n            }\r\n            onChange={props.handleInputChange}\r\n            placeholder=\"1222-12-12\"\r\n            type={\"date\"}\r\n            defaultValue={props?.editData?.task_date || \"1222/12/12\"}\r\n            data-testid=\"input-field-task_date\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"input-controlx\">\r\n          <label className=\"input-label expanded-width\">Time</label>\r\n          <input\r\n            className=\"input-field form-control\"\r\n            name=\"task_time\"\r\n            value={\r\n              props?.inputValues?.task_time ||\r\n              secondsToTime(props?.editData?.task_time) ||\r\n              \"\"\r\n            }\r\n            onChange={props.handleInputChange}\r\n            placeholder=\"10:02:03\"\r\n            type={typeOfTime}\r\n            data-testid=\"input-field-task_time\"\r\n            defaultValue={props?.editData?.task_time || \"\"}\r\n            onFocus={focusHandler}\r\n            onBlur={blurHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"input-controlx\"\r\n        style={{ marginLeft: \"-20px\", marginRight: \"10px\" }}\r\n      >\r\n        <label className=\"input-label expanded-width\">Assigned user</label>\r\n        <select\r\n          className=\"input-field form-control\"\r\n          name=\"assigned_user\"\r\n          value={\r\n            props?.inputValues?.assigned_user ||\r\n            props?.editData?.assigned_user ||\r\n            \"\"\r\n          }\r\n          onChange={props.handleSelectChange}\r\n          placeholder=\"09:12:11\"\r\n          defaultValue={props?.editData?.assigned_user || \"\"}\r\n        >\r\n          {admins &&\r\n            admins.map((admin: EnumServiceItems) => {\r\n              //console.log(admins)\r\n              return <option value={admin[\"user_id\"]}>{admin[\"name\"]}</option>;\r\n            })}\r\n        </select>\r\n      </div>\r\n      <br />\r\n      <div className=\"input-control spaced-form\">\r\n        <div>\r\n          {\" \"}\r\n          <i\r\n            onClick={(e: React.MouseEvent<HTMLElement>) =>\r\n              props.handleDelete(e, \"dsds\")\r\n            }\r\n            className=\"fa fa-trash pointer\"\r\n          ></i>\r\n        </div>\r\n        <div>\r\n          <button\r\n            className=\"\"\r\n            data-testid=\"form-submit\"\r\n            style={{ marginRight: \"10px\" }}\r\n            onClick={(e: React.MouseEvent<HTMLElement>) => {\r\n              e.preventDefault();\r\n              const elementForm = document.getElementById(\r\n                \"formData\" + props?.mode?.formId\r\n              ) as HTMLFormElement;\r\n\r\n              if (elementForm != null) {\r\n                elementForm.reset();\r\n                var $el = document.querySelector(\".J_list\") as HTMLElement;\r\n                $el.classList.toggle(\"open\");\r\n\r\n                if (localStorage.getItem(\"formIndex\")) {\r\n                  const formIndex: string | null =\r\n                    localStorage.getItem(\"formIndex\");\r\n                  var $el2 = document.getElementById(\r\n                    \"taskedit_\" + formIndex\r\n                  ) as HTMLElement;\r\n                  //view clips\r\n                  var $elementClip = document.querySelector(\r\n                    \"#viewer_\" + formIndex\r\n                  ) as HTMLElement;\r\n                  $elementClip.classList.toggle(\"view-short-clips\");\r\n                  $elementClip.classList.toggle(\"edit-long-clips\");\r\n\r\n                  $el2.classList.toggle(\"move_into_place\");\r\n                  $el2.classList.toggle(\"move-in-to-place-active\");\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"btn btn-success \"\r\n            data-testid=\"form-submit\"\r\n            onClick={props.handleFormSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: StateProps) => {\r\n  ////console.log(state);\r\n  const assignedUser = state.assignedUser;\r\n  ////console.log(state.assignedUser);\r\n  return {\r\n    data: state,\r\n  };\r\n};\r\n\r\nconst EnhancedForm = connect(mapStateToProps)(FormBox);\r\nexport default EnhancedForm;\r\n","import React, {\r\n  Component,\r\n  useState,\r\n  SyntheticEvent,\r\n  MouseEvent,\r\n  useEffect,\r\n  Dispatch,\r\n} from \"react\";\r\nimport { connect, RootStateOrAny, useDispatch, useSelector } from \"react-redux\";\r\nimport { updateTask, getTasks, getTask, deleteTask } from \"../../../actions\";\r\nimport EnhancedForm from \"./FormBox\";\r\nimport SlooviCrudApiService from \"../../../services/crudeapi.services\";\r\n\r\n/*\r\n * @author: test code exercires\r\n * TAKS INTERFACE PROPS\r\n */\r\ninterface TaskProps {\r\n  id?: string | null;\r\n  assigned_user: string; //<id value from /team api response >,\r\n  task_date: string; //<date in 'YYYY-MM-DD' format from date field in task>,\r\n  task_time: number; //<time from time field in task>,integer ,(for ex=01:30am means 5400 seconds)\r\n  is_completed: number; //<0 or 1 integer data type>,\r\n  time_zone: number; //<Give timezone value in seconds and data type is integer>,(for ex= +05:30 means 19800 seconds)\r\n  task_msg: string; //<task description from task description field in task>\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n * DYNAMIC LISTED TASKS PROPS\r\n */\r\ntype DynamicDataProps<T> = {\r\n  allData: TaskProps[];\r\n  handleFormSubmit: (\r\n    e: React.MouseEvent<HTMLElement>,\r\n    id?: string,\r\n    dataEdited?: TaskProps\r\n  ) => void;\r\n  handleDelete: (e: React.MouseEvent<HTMLElement>, id: string) => void;\r\n};\r\n\r\n/*\r\n * @author: test code exercires\r\n * DYNAMIC COMPONENT STATE PROPS\r\n */\r\ntype DynamicDataState = {};\r\n\r\ninterface StateProps {\r\n  auth: object;\r\n  assignedUser: object;\r\n  form: object;\r\n  taskReducer: object;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n * ASSIGNE D USERS INTERFACE\r\n */\r\ninterface userAssignment {\r\n  name: string;\r\n  company_id: string;\r\n}\r\n\r\ninterface EnumServiceItems extends Array<userAssignment> {}\r\n\r\ninterface EditTaskProps {\r\n  editTask: (data: TaskProps) => Promise<any>;\r\n  usersAssigned: EnumServiceItems[];\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: dYNAMIC COMPONENT\r\n * list all task , responsible for rediering edit form , animated effects on each selected edit form\r\n */\r\nconst DynamicData: React.SFC<DynamicDataProps<any>> = (props) => {\r\n  //console.log(props);\r\n  const data: Array<any> = useSelector(\r\n    (state: RootStateOrAny) => state.taskReducer\r\n  );\r\n  ////console.log(data);\r\n  useEffect(() => {\r\n    /*\r\n     *\r\n     *  @reason: use effect used to get list of all fetched task\r\n     */\r\n    getTasks();\r\n  }, [getTasks]);\r\n\r\n  const [formMode, setFormMode] = useState(\"editMode\");\r\n  const [formId, setFormId] = useState<number>(0);\r\n\r\n  //find a way to make thhese reusable\r\n  const [allAllowedAdmin, setAllAllowedAdmin] = useState<EnumServiceItems[]>(\r\n    []\r\n  );\r\n\r\n  const [apiData, LoadedData] = useState<Array<any>>([]);\r\n\r\n  /*@params : none\r\n   *@method: handleToggler\r\n   * @reason: switcher toggles the plus icon on the ui to add task\r\n   */\r\n\r\n  const handleToggler = () => {\r\n    try {\r\n      var $el = document.querySelector(\".J_list\") as HTMLElement;\r\n      $el.classList.toggle(\"open\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  const [inputValues, setInputValues] = useState<TaskProps>({\r\n    id: null,\r\n    assigned_user: \"\",\r\n    task_date: \"\",\r\n    task_time: 10,\r\n    is_completed: 0,\r\n    time_zone: +1,\r\n    task_msg: \"\",\r\n  });\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const [allData, setListData] = useState<TaskProps[]>([]);\r\n\r\n  // use Effect to fetch all the tasks\r\n  useEffect(() => {\r\n    //if (props.usersAssigned) {\r\n    //setAllAllowedAdmin(props.usersAssigned);\r\n    //}\r\n  }, []);\r\n\r\n  const [domAutoRefresh, setDomAutoRefresh] = useState(\r\n    Math.random() * 100 + Math.floor(Math.random() * 4)\r\n  );\r\n\r\n  /*@params : async (\r\n    e: React.MouseEvent<HTMLElement>,\r\n    id?: string,\r\n    inputValuesForm?: TaskProps\r\n  )\r\n *@method: handleFormSubmit\r\n * @reason: switcher toggles the plus icon on the ui to add task\r\n*/\r\n  const handleFormSubmit = async (\r\n    e: React.MouseEvent<HTMLElement>,\r\n    id?: string,\r\n    inputValuesForm?: TaskProps\r\n  ) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const submitData: TaskProps = {\r\n        assigned_user: inputValues.assigned_user,\r\n        task_date: inputValues.task_date,\r\n        task_time: inputValues.task_time,\r\n        is_completed: 0,\r\n        time_zone: +1,\r\n        task_msg: inputValues.task_msg,\r\n      };\r\n\r\n      console.log(submitData)\r\n      // you can either choose to overide the method or use as is\r\n      await props.handleFormSubmit(e, id, submitData);\r\n      setDomAutoRefresh(Math.random() * 100 + Math.floor(Math.random() * 4));\r\n    } catch (err) {}\r\n  };\r\n\r\n  /*@params: (e: React.FormEvent<HTMLInputElement>)\r\n   */\r\n\r\n  const handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    try {\r\n      const { name, value } = e.currentTarget;\r\n      setInputValues({\r\n        ...inputValues,\r\n        [name]: value,\r\n      });\r\n\r\n      \r\n\r\n      console.log(inputValues);\r\n    } catch (err) {}\r\n  };\r\n\r\n\r\n  /*@desc; converts a string input back to time*/\r\n\r\nconst secondsToTime = (str:string): string =>{\r\n    let secondsGiven: number|string = parseInt(str, 10); \r\n    var hoursDeduced: number|string   = Math.floor(secondsGiven / 3600);\r\n    var minutesObtained: number|string = Math.floor((secondsGiven - (hoursDeduced * 3600)) / 60);\r\n    secondsGiven = secondsGiven - (hoursDeduced * 3600) - (minutesObtained * 60);\r\n    if (hoursDeduced   < 10) {hoursDeduced   = \"0\"+hoursDeduced;}\r\n    if (minutesObtained < 10) {minutesObtained = \"0\"+minutesObtained;}\r\n    if (secondsGiven < 10) {secondsGiven = \"0\"+secondsGiven;}\r\n    let time: string    = hoursDeduced+':'+minutesObtained+':'+secondsGiven;\r\n    return time;\r\n}\r\n\r\n\r\n  /*@params: (event: React.FormEvent<HTMLSelectElement>)\r\n   */\r\n  const handleSelectChange = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    try {\r\n      var inputValue: string = event.currentTarget.value;\r\n\r\n      setInputValues({\r\n        ...inputValues,\r\n        assigned_user: inputValue,\r\n      });\r\n\r\n      console.log(inputValues);\r\n    } catch (err) {}\r\n  };\r\n\r\n  /*@params : (id: number)\r\n   */\r\n  const handleEditView = async (id: number) => {\r\n\r\n  if (formMode == \"editMode\"){\r\n   // alert(\"yes\")\r\n    const Loading = document.querySelector(\"usereffect\") as HTMLElement;\r\n    if (Loading != null) {\r\n      Loading.classList.remove(\"hidden\");\r\n    }\r\n    const nowViewing: string = window.localStorage.getItem(\"recentDoc\")!;\r\n    if (localStorage.getItem(\"recentDoc\")) {\r\n      const res = await SlooviCrudApiService.getTask(nowViewing);\r\n      localStorage.setItem(\"formIndex\", id.toString());\r\n      const response = await res.json();\r\n      //console.log(response.results);\r\n\r\n      // convert back to time input\r\n      var split: string = secondsToTime(response?.results?.task_time.toString());\r\n\r\n     // console.log(split,response?.results?.task_time)\r\n      \r\n\r\n\r\n      setInputValues({\r\n        ...inputValues,\r\n        assigned_user: response.results.assigned_user,\r\n        task_msg: response.results.task_msg,\r\n        task_date: response.results.task_date,\r\n        task_time: split || response.results.task_time,\r\n        //time_zone: 19800\r\n      });\r\n\r\n      var $el = document.getElementById(\"taskedit_\" + id) as HTMLElement;\r\n      //view clips\r\n      var $elementClip = document.querySelector(\"#viewer_\" + id) as HTMLElement;\r\n      $elementClip.classList.toggle(\"view-short-clips\");\r\n      $elementClip.classList.toggle(\"edit-long-clips\");\r\n      $el.classList.toggle(\"move_into_place\");\r\n      $el.classList.toggle(\"move-in-to-place-active\");\r\n      setFormMode(\"editMode\");\r\n      setFormId(id);\r\n      var form = window.document.getElementById(\"formData\" + id);\r\n      if (form !== null) {\r\n        form.focus();\r\n      }\r\n    }\r\n    if (Loading != null) {\r\n      Loading.classList.add(\"hidden\");\r\n    }\r\n   }\r\n  };\r\n\r\n  /*@params : (e: React.MouseEvent<HTMLElement>,id: string)\r\n   */\r\n\r\n  const handleDelete = async (e: React.MouseEvent<HTMLElement>, id: string) => {\r\n   // console.log(\"delete called\");\r\n    await props.handleDelete(e, id);\r\n    setDomAutoRefresh(Math.random() * 100 + Math.floor(Math.random() * 4));\r\n  };\r\n\r\n  return (\r\n    <ul className=\"tasks\" style={{ background: \"#fff\", padding: \"5px\" }}>\r\n      <span key={domAutoRefresh}></span>\r\n      {data.length > 0 &&\r\n        data.map((taskGiven, index: number) => {\r\n          return (\r\n            <li id={\"viewer_\" + index} className=\"view-short-clips\">\r\n              <div className=\"\" key={index}>\r\n                <div className=\"list-headerx\" style={{ lineHeight: \"10px\" }}>\r\n                  {\"Opportunity\"}\r\n                </div>\r\n\r\n                <div\r\n                  className=\"box box-white\"\r\n                  style={{ background: \"#fff\", marginTop: \"15px\" }}\r\n                >\r\n                  <div className=\"stay-in-place\" id={\"taskparent_\" + index}>\r\n                    <div className=\"main-flex-box\">\r\n                      <div className=\"two-colsets\">\r\n                        <a href=\"\" className=\" profile  waves-light \">\r\n                          <img\r\n                            src=\"./logo192.png\"\r\n                            alt=\"user-img\"\r\n                            className=\"img-circle\"\r\n                          />\r\n                        </a>\r\n                        <div className=\"list-columnset\">\r\n                          <p className=\"margin-space\">{taskGiven.task_msg}</p>\r\n                          <p className=\"margin-space\">sample</p>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"right\">\r\n                        <i\r\n                          onClick={() => {\r\n                            localStorage.setItem(\"recentDoc\", taskGiven.id);\r\n                            handleEditView(index);\r\n                          }}\r\n                          className=\" fa fa-edit pointer\"\r\n                        ></i>\r\n                        <i className=\"hidden usereffect\">loading...</i>\r\n                        <i className=\"fa fa-ellipsis-h \"></i>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    id={\"taskedit_\" + index}\r\n                    className=\"move-in-to-place default-pos\"\r\n                  >\r\n                    <EnhancedForm\r\n                      handleFormSubmit={(\r\n                        e: React.MouseEvent<HTMLElement>,\r\n                        id?: string,\r\n                        inputValues?: TaskProps\r\n                      ) => handleFormSubmit(e, taskGiven.id, inputValues)}\r\n                      handleInputChange={handleInputChange}\r\n                      inputValues={inputValues}\r\n                      allAllowedAdmin={allAllowedAdmin}\r\n                      handleSelectChange={handleSelectChange}\r\n                      editData={taskGiven}\r\n                       \r\n                      mode={{ formMode, setFormMode, formId }}\r\n                      handleDelete={(e: React.MouseEvent<HTMLElement>, id) =>\r\n                        handleDelete(e, taskGiven.id)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default DynamicData;\r\n","import React, {\r\n  Component,\r\n  useState,\r\n  SyntheticEvent,\r\n  MouseEvent,\r\n  useEffect,\r\n} from \"react\";\r\nimport { connect, RootStateOrAny, useDispatch, useSelector } from \"react-redux\";\r\nimport { createTask, updateTask, deleteTask } from \"../../../actions\";\r\nimport EnhancedForm from \"./FormBox\";\r\nimport DynamicData from \"./TaskLists\";\r\n\r\ninterface userAssignment {\r\n  name: string;\r\n  company_id: string;\r\n}\r\n\r\ninterface EnumServiceItems extends Array<userAssignment> {}\r\n\r\n/*@desc: add task props*/\r\ninterface AddTaskProps {\r\n  createTask: (data: TaskProps) => Promise<any>;\r\n  updateTask: (id: string, data: TaskProps) => Promise<any>;\r\n  deleteTask: (e: React.MouseEvent<HTMLElement>, id: string) => Promise<any>;\r\n  usersAssigned: EnumServiceItems[];\r\n}\r\n\r\n/*@description: task interface props*/\r\ninterface TaskProps {\r\n  id?: string | null;\r\n  assigned_user: string; //<id value from /team api response >,\r\n  task_date: string; //<date in 'YYYY-MM-DD' format from date field in task>,\r\n  task_time: number; //<time from time field in task>,integer ,(for ex=01:30am means 5400 seconds)\r\n  is_completed: number; //<0 or 1 integer data type>,\r\n  time_zone: number; //<Give timezone value in seconds and data type is integer>,(for ex= +05:30 means 19800 seconds)\r\n  task_msg: string; //<task description from task description field in task>\r\n}\r\n\r\n/*@description: Add Task component\r\n * contains the dynamic list component, the add task component and\r\n * a enhanced generic form component\r\n */\r\n\r\nconst AddTask: React.SFC<AddTaskProps> = (props: AddTaskProps) => {\r\n  // ////console.log(props.usersAssigned)\r\n\r\n  //const [inputValues, setInputValues] = useState<{ [x: string]: string }>()\r\n\r\n  const [formMode, setFormMode] = useState(\"editMode\");\r\n\r\n  const [allAllowedAdmin, setAllAllowedAdmin] = useState<EnumServiceItems[]>(\r\n    []\r\n  );\r\n\r\n  const [apiData, LoadedData] = useState<Array<any>>([]);\r\n\r\n  /*@params: ()*/\r\n  const handleToggler = () => {\r\n    var $el = document.querySelector(\".J_list\") as HTMLElement;\r\n    $el.classList.toggle(\"open\");\r\n    setFormMode(\"createMode\");\r\n    //  alert(formMode)\r\n  };\r\n  useEffect(() => {}, []);\r\n\r\n  const [inputValues, setInputValues] = useState<TaskProps>({\r\n    id: null,\r\n    assigned_user: \"\",\r\n    task_date: \"\",\r\n    task_time: 100,\r\n    is_completed: 0,\r\n    time_zone: 4000,\r\n    task_msg: \"\",\r\n  });\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const [allData, setListData] = useState<TaskProps[]>([]);\r\n\r\n  // use Effect to fetch all the tasks\r\n  useEffect(() => {\r\n    if (props.usersAssigned) {\r\n      setAllAllowedAdmin(props.usersAssigned);\r\n    }\r\n  }, []);\r\n\r\n  const [domAutoRefresh, setDomAutoRefresh] = useState(\r\n    Math.random() * 100 + Math.floor(Math.random() * 4)\r\n  );\r\n\r\n  function toTimestamp(strDate: string) {\r\n    var datumDigits: number = Date.parse(strDate);\r\n    return datumDigits / 1000;\r\n  }\r\n\r\n /*@desc: convert time to seconds\r\n  */\r\n function timeToSeconds(str: string=\"\"):number {\r\n    let time: Array<any>  = str.split(':'),\r\n        seconds:number = 0, minutes:number = 1;\r\n    while (time.length > 0) {\r\n        const timeUnit : string = time.pop()\r\n        seconds += minutes * parseInt(timeUnit, 10);\r\n        minutes *= 60;\r\n    }\r\n\r\n    return seconds;\r\n}\r\n\r\n/*timezone maker*/\r\nfunction timezone_in_seconds() \r\n{  \r\n   const dateTime: any = new Date(); \r\n   return -dateTime.getTimezoneOffset() * 60;\r\n}\r\n\r\n\r\n\r\n\r\n  /*@params: (e: React.MouseEvent<HTMLElement>, id :string =\"\", dataEdited : TaskProps = inputValues)\r\n   */\r\n  const handleFormSubmit = async (\r\n    e: React.MouseEvent<HTMLElement>,\r\n    id: string = \"\",\r\n    dataEdited: TaskProps = inputValues\r\n  ) => {\r\n    e.preventDefault();\r\n    // do the color background effect thing on submitting\r\n    const divBox = document.querySelector(\".task-list\") as HTMLElement;\r\n    divBox.classList.add(\"darker-aqua\");\r\n\r\n    if (formMode == \"createMode\" || !id || id == null || id.length <= 0) {\r\n      delete inputValues.id;\r\n      //inputValues.task_time = 3000; // for now will fix this dynamically\r\n\r\n\r\n\r\n      const submitData: TaskProps = {\r\n        assigned_user: inputValues.assigned_user,\r\n        task_date: inputValues.task_date,\r\n        task_time: timeToSeconds(inputValues?.task_time?.toString()),\r\n        is_completed: 0,\r\n        time_zone: timezone_in_seconds(),\r\n        task_msg: inputValues.task_msg,\r\n      };\r\n      props.createTask(submitData);\r\n      setTimeout(() => {\r\n        divBox.classList.remove(\"darker-aqua\");\r\n        setDomAutoRefresh(Math.random() * 100 + Math.floor(Math.random() * 4));\r\n      }, 300);\r\n    } else {\r\n      // we are editing\r\n      console.log(\"here edit\");\r\n      const submitData: TaskProps = {\r\n        assigned_user: dataEdited?.assigned_user,\r\n        task_date: dataEdited?.task_date,\r\n        task_time: timeToSeconds(dataEdited?.task_time?.toString()),\r\n        is_completed: 0,\r\n        time_zone: timezone_in_seconds(),\r\n        task_msg: dataEdited?.task_msg,\r\n      };\r\n\r\n      if (id && submitData) {\r\n        delete inputValues.id;\r\n        //inputValues.task_time =3000\r\n        //console.log(\"you clicked\");\r\n        props.updateTask(id, submitData);\r\n        setDomAutoRefresh(Math.random() * 100 + Math.floor(Math.random() * 4));\r\n      }\r\n    }\r\n\r\n    // reversing animations effect\r\n    var $el = document.querySelector(\".J_list\") as HTMLElement;\r\n    $el.classList.toggle(\"open\");\r\n\r\n    //edit form submit and cancel\r\n    if (localStorage.getItem(\"formIndex\")) {\r\n      // WAS SET  WHEN OPEN\r\n      const formIndex: string | null = localStorage.getItem(\"formIndex\");\r\n      var $el = document.getElementById(\"taskedit_\" + formIndex) as HTMLElement;\r\n      window.location.reload()\r\n    }\r\n  };\r\n\r\n  /*@params: (e: React.MouseEvent<HTMLElement>,id:string)\r\n   */\r\n  const handleDelete = async (e: React.MouseEvent<HTMLElement>, id: string) => {\r\n    console.log(\"delete parent\");\r\n    await props.deleteTask(e, id);\r\n\r\n    //edit form submit and cancel\r\n    if (localStorage.getItem(\"formIndex\")) {\r\n      // WAS SET  WHEN OPEN\r\n      const formIndex: string | null = localStorage.getItem(\"formIndex\");\r\n      var $el = document.getElementById(\"taskedit_\" + formIndex) as HTMLElement;\r\n      window.location.reload()\r\n    }\r\n  };\r\n\r\n  /*@params: (e: React.FormEvent<HTMLInputElement>)\r\n   */\r\n  const handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.currentTarget;\r\n    setInputValues({\r\n      ...inputValues,\r\n      [name]: value,\r\n    });\r\n\r\n    ////console.log(inputValues);\r\n  };\r\n\r\n  /*@params: (event: React.FormEvent<HTMLSelectElement>)\r\n   */\r\n  const handleSelectChange = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    var safeSearchTypeValue: string = event.currentTarget.value;\r\n\r\n    ////console.log(safeSearchTypeValue); // in chrome => B\r\n\r\n    setInputValues({\r\n      ...inputValues,\r\n      assigned_user: safeSearchTypeValue,\r\n    });\r\n  };\r\n  /*@params: ()*/\r\n  const dropDownEffect = () => {\r\n    const formTrigger = document.getElementById(\r\n      \"formData\"\r\n    ) as HTMLButtonElement;\r\n    const wrapper = document.querySelector(\".wrapper\") as HTMLButtonElement;\r\n    if (formTrigger != null) {\r\n      // 👉️ button has type HTMLElement here\r\n      formTrigger.classList.toggle(\"dropdown-form\");\r\n      wrapper.classList.toggle(\"wrapper-form-visible\");\r\n    }\r\n  };\r\n\r\n  const newTask = () => {};\r\n\r\n  return (\r\n    <div className=\"submit-form\">\r\n      {submitted ? (\r\n        <div>\r\n          <h4>You submitted successfully!</h4>\r\n          <button className=\"btn btn-success\" onClick={newTask}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <ul className=\"task-list\">\r\n            <li className=\"J_list\">\r\n              <div className=\"list-header\" onClick={handleToggler}>\r\n                Task\r\n              </div>\r\n              <div className=\"list-content\">\r\n                <div className=\"list-content-inner\">\r\n                  <span key={domAutoRefresh}></span>\r\n\r\n                  <EnhancedForm\r\n                    handleFormSubmit={handleFormSubmit}\r\n                    handleInputChange={handleInputChange}\r\n                    inputValues={inputValues}\r\n                    allAllowedAdmin={allAllowedAdmin}\r\n                    handleSelectChange={handleSelectChange}\r\n                    editData={inputValues}\r\n                    \r\n                    mode={{ formMode, setFormMode }}\r\n                    handleDelete={(\r\n                      e: React.MouseEvent<HTMLElement>,\r\n                      id: string\r\n                    ) => handleDelete(e, id)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </li>\r\n            <li>\r\n              <DynamicData\r\n                allData={allData}\r\n                handleFormSubmit={handleFormSubmit}\r\n                handleDelete={(e: React.MouseEvent<HTMLElement>, id: string) =>\r\n                  handleDelete(e, id)\r\n                }\r\n              />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  createTask,\r\n  deleteTask,\r\n  updateTask,\r\n})(AddTask);\r\n","import React, { useEffect, Dispatch } from \"react\";\r\nimport { connect, RootStateOrAny, useDispatch, useSelector } from \"react-redux\";\r\nimport { getAssignedUsers, getTasks } from \"../../actions/\";\r\nimport AuthInterceptor from \"../../hocs/AuthorizationGate\";\r\nimport AddTask from \"./TaskEvent/Task\";\r\n\r\n// we need this\r\nimport { DefaultingRootState } from \"../../reducers\";\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: fAKE MOCK UP SAMPLE DESIGN TEMPLATE : NAV BAR COMPONENT\r\n */\r\nconst MockUpNavbar = () => {\r\n  return (\r\n    <div className=\"nav-bar\">\r\n      <div className=\"left-component\">\r\n        <div className=\"hambugger\">x</div>\r\n        <div className=\"logo\">logo</div>\r\n        <div className=\"search-bar search\"></div>\r\n      </div>\r\n      <div className=\"right-component\">\r\n        <div className=\"icon1\"></div>\r\n        <div className=\"icon1\"></div>\r\n        <div className=\"icon2\"></div>\r\n\r\n        <div className=\"icon4\"></div>\r\n        <div className=\"icon5\"></div>\r\n        <div className=\"icon6\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc:fAKE MOCK UP SAMPLE DESIGN TEMPLATE : SIDE BAR COMPONENT\r\n */\r\nconst MockUpSidebar = () => {\r\n  return (\r\n    <div className=\"sidebar-iconic\">\r\n      <div className=\"icon1\"></div>\r\n      <div className=\"icon2\"></div>\r\n\r\n      <div className=\"icon4\"></div>\r\n      <div className=\"icon5\"></div>\r\n      <div className=\"icon6\"></div>\r\n\r\n      <div className=\"icon1\"></div>\r\n      <div className=\"icon2\"></div>\r\n\r\n      <div className=\"icon4\"></div>\r\n      <div className=\"icon5\"></div>\r\n      <div className=\"icon6\"></div>\r\n      <div className=\"icon1\"></div>\r\n      <div className=\"icon2\"></div>\r\n\r\n      <div className=\"icon4\"></div>\r\n      <div className=\"icon5\"></div>\r\n      <div className=\"icon6\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc:fAKE MOCK UP SAMPLE DESIGN TEMPLATE : NAV BAR COMPONENT\r\n */\r\nconst FakeToolBar = () => {\r\n  return (\r\n    <div className=\"horizontal-tabs\">\r\n      <div className=\"left-component\">\r\n        <div className=\"icon2\"></div>\r\n        <div className=\"icon2\"></div>\r\n\r\n        <div className=\"icon2\"></div>\r\n\r\n        <div className=\"icon2\"></div>\r\n        <div className=\"icon2\"></div>\r\n        <div className=\"icon2\"></div>\r\n      </div>\r\n      <div className=\"right-component\">\r\n        <div className=\"icon1\"></div>\r\n        <div className=\"icon2\"></div>\r\n\r\n        <div className=\"icon4\"></div>\r\n        <div className=\"icon5\"></div>\r\n        <div className=\"icon6\"></div>\r\n\r\n        <div className=\"icon2\"></div>\r\n        <div className=\"icon2\"></div>\r\n        <div className=\"icon2\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: ASSIGNED USER PROPS\r\n */\r\ninterface userAssignment {\r\n  name: string;\r\n  company_id: string;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: SERVICE PROPS\r\n */\r\ninterface EnumServiceItems extends Array<userAssignment> {}\r\n\r\nexport interface DashboardProps {\r\n  data?: EnumServiceItems[];\r\n  getAssignedUsers: () => void;\r\n  getTasks: () => void;\r\n  tasks?: Array<any>;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: USER DASHBOARD AFTER LOGIN\r\n */\r\nconst Dashboard: React.SFC<DashboardProps> = ({\r\n  data,\r\n  tasks,\r\n  getAssignedUsers,\r\n  getTasks,\r\n}) => {\r\n  data = useSelector(\r\n    (state: RootStateOrAny) => state.assignedUser.assignedUsers\r\n  );\r\n\r\n  tasks = useSelector((state: RootStateOrAny) => state);\r\n\r\n  //console.log(tasks);\r\n\r\n  ////console.log(data);\r\n  useEffect(() => {\r\n    getAssignedUsers();\r\n    getTasks();\r\n  }, [getAssignedUsers, getTasks]);\r\n\r\n  //console.log(data);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MockUpNavbar />\r\n\r\n      <div className=\"body-layout\">\r\n        <MockUpSidebar />\r\n\r\n        <div className=\"body-widget\">\r\n          <FakeToolBar />\r\n\r\n          <div className=\"workspace\">\r\n            <div className=\"left-space-equal\">\r\n              {data && <AddTask usersAssigned={data} />}\r\n            </div>\r\n            <div className=\"right-space-equal\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: STATE PROPS\r\n */\r\ninterface StateProps {\r\n  auth: object;\r\n  assignedUser: object;\r\n  form: object;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: MAPPER FUNCTION TO MATCH STATE PROPS\r\n */\r\nconst mapStateToProps = (state: StateProps) => {\r\n  //console.log(state);\r\n  //const assignedUser = state.assignedUser;\r\n  ////console.log(state.assignedUser);\r\n  return {\r\n    data: state,\r\n    // tasks: state.todoReducers\r\n  };\r\n};\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: MAPPER FUNCTION TO MAP DISPATCHERS TO ACTIONS\r\n */\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  getAssignedUsers: () => dispatch(getAssignedUsers()),\r\n  getTasks: () => dispatch(getTasks()),\r\n});\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: EXPORTED REDUX AWEAR COMPONENT\r\n */\r\nconst DashboardAuthenticated = AuthInterceptor(Dashboard);\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DashboardAuthenticated);\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { History } from \"history\";\r\n\r\n/*\r\n * @author: test code exercires\r\n * Auth gate way props interface\r\n */\r\ninterface AuthenticatorGateWayProps {\r\n  authorized: string;\r\n  history?: History;\r\n}\r\n\r\n/*\r\n * @author: test code exercires\r\n *  @desc: Auth HOC FOR REUSABLE AUTHENTICATION AND REDIRECTIONS\r\n */\r\n\r\nexport default (ChildComponent: React.FC<any>) => {\r\n  class AuthenticatorGateWay extends Component<AuthenticatorGateWayProps> {\r\n    componentDidMount() {\r\n      this.redirect();\r\n    }\r\n    componentDidUpdate() {\r\n      this.redirect();\r\n    }\r\n    redirect() {\r\n      if (!this.props.authorized) {\r\n        this.props.history!.push(\"/\");\r\n      }\r\n    }\r\n    render() {\r\n      return <ChildComponent {...this.props} />;\r\n    }\r\n  }\r\n  const mapStateToProps = (state: any) => {\r\n    return {\r\n      authorized: state.auth.authenticated,\r\n    };\r\n  };\r\n\r\n  return connect(mapStateToProps, null)(AuthenticatorGateWay);\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n/*\r\n * react starter kit for spa pages\r\n * using redux store house for state mgt\r\n */\r\nimport rootReducer from \"./reducers/index\";\r\nimport Home from \"./components/Home/Home\";\r\nimport Signin from \"./components/Signin/Signin\";\r\nimport Signout from \"./components/Signout/Signout\";\r\nimport Dashboard from \"./components/Dashboard/Dashboard\";\r\n\r\n/*\r\n *\r\n * using redux store house for state mgt\r\n */\r\nconst store = createStore(\r\n  rootReducer,\r\n  {\r\n    auth: {\r\n      authenticated: localStorage.getItem(\"token\"),\r\n    },\r\n  },\r\n  applyMiddleware(thunk)\r\n);\r\n\r\n/*\r\n *\r\n * dom renderer\r\n */\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/signin\" component={Signin} />\r\n\r\n        <Route path=\"/dashboard\" component={Dashboard} />\r\n        <Route path=\"/signout\" component={Signout} />\r\n      </App>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}